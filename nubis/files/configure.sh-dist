#!/bin/bash
# Reverse engineered configure script

# exits immediately pipes, list or loops return non-zero
# Stolen from actual install script
set -e

OKTA_URL="xxxxx"
LDAP_HOSTNAME="xxxxxxx"
LDAP_BIND_USER="xxxxx"
LDAP_BIND_PASSWORD="xxxxxx"
LDAP_BASE_DN="xxxxxxx"
LDAP_PORT="389"
LDAP_SSL="n"
USE_PROXY="n"
EMAIL_ADDRESS="example@example.com"
FROM_ADDRESS="no-reply@example.com"

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# must use root
if [[ "$(id -u)" != "0" ]]; then
    echo -e "\nERROR: Please switch to root or use sudo to run this script\n"
    exit 1
fi

# Some handy variables we can use
. /opt/Okta/OktaLDAPAgent/scripts/defs.sh

# We want a fresh install everytime, so lets delete it everytime
if [ -e $InstallConfigFile ]; then
    rm -f $InstallConfigFile
fi

# Validate ldap settings
set +e

$JAVA -Dagent_home="$AgentInstallPrefix" -Dlog4j.configuration="$AgentInstallPrefix/conf/log4j.properties" -jar $AgentInstallPrefix/bin/OktaLDAPAgent.jar \
    -mode "validateLdap" \
    -orgUrl "$OKTA_URL" \
    -ldapHost "$LDAP_HOSTNAME" \
    -ldapPort "$LDAP_PORT" \
    -ldapAdminDN "$LDAP_BIND_USER" \
    -ldapAdminPassword "$LDAP_BIND_PASSWORD" \
    -baseDN "$LDAP_BASE_DN" \
    -configFilePath "$ConfigFile" \
    -noInstance "true" \
    -ldapUseSSL "$LDAP_SSL" 2>&1 > /dev/null

RV=$?
if [[ ${RV} == 0 ]]; then
    echo "LDAP Settings verified"
else
    echo "LDAP settings failed, verify if settings are correct" | mail -r ${FROM_ADDRESS} -s "LDAP verification failed" ${EMAIL_ADDRESS}
    exit ${RV}
fi

echo -e "\nSaving install configuration file for future upgrades at:\n  $InstallConfigFile"
echo """
# Okta LDAP Agent Install configuration file.
# This file is read during the post-installation or configuration time only.

orgUrl=$OKTA_URL

ldapHost=$LDAP_HOSTNAME
ldapAdminDN=$LDAP_BIND_USER
ldapPort=$LDAP_PORT
baseDN=$LDAP_BASE_DN

ldapUseSSL=$LDAP_SSL
ldapSSLPort=$ldapSSLPort

proxyEnabled=$proxyEnabled
proxyHost=$proxyHost
proxyPort=$proxyPort
proxyUser=$proxyUser
""" > $InstallConfigFile

echo -e "\nConfiguring Okta LDAP agent...\n"
$JAVA -Dagent_home="$AgentInstallPrefix" -Dlog4j.configuration="$AgentInstallPrefix/conf/log4j.properties" -jar $AgentInstallPrefix/bin/OktaLDAPAgent.jar \
    -mode "register" \
    -orgUrl "$OKTA_URL" \
    -ldapHost "$LDAP_HOSTNAME" \
    -ldapPort "$LDAP_PORT" \
    -ldapAdminDN "$LDAP_BIND_USER" \
    -ldapAdminPassword "$LDAP_BIND_PASSWORD" \
    -baseDN "$LDAP_BASE_DN" \
    -configFilePath "$ConfigFile" \
    -noInstance "true" \
    -ldapUseSSL "$LDAP_SSL" 2>&1 | (
while read LINE; do
    if echo "$LINE" | grep Please; then
        echo $LINE | mail -r ${FROM_ADDRESS} -s "Please configure Okta" ${EMAIL_ADDRESS}
    fi
done
)

RV=${PIPESTATUS[0]}

if [[ ${RV} == 0 ]] && [[ -r $ConfigFile ]] ; then
    echo -e """
Configuration successful.
Service can now be started by typing:
    service OktaLDAPAgent start
as root.
    """ | mail -r ${FROM_ADDRESS} -s "Okta configuration sucessful" ${EMAIL_ADDRESS}
    service OktaLDAPAgent start
    exit 0
else
    echo "Running ${0} again"
    . ${0}
fi
