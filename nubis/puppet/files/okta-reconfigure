#!/bin/bash
# This will reconfigure okta and overwrite the configuration in consul
#
# You shouldn't be doing this unless there is a good reason and this script
# is more of a helper script that is available on the OS if you need it

# must use root
if [[ "$(id -u)" != "0" ]]; then
    echo -e "\nERROR: Please switch to root or use sudo to run this script\n"
    exit 1
fi

eval `curl -s -fq http://169.254.169.254/latest/user-data`
CONSUL="http://localhost:8500/v1/kv/${NUBIS_STACK}/${NUBIS_ENVIRONMENT}/config"

# Grabbing information from Consul
function _init() {
    OKTA_URL=$(curl -s -fq ${CONSUL}/OktaURL?raw=1)
    OKTA_URL=${OKTA_URL:-https://mozilla.oktapreview.com}

    LDAP_HOSTNAME=$(curl -s -fq ${CONSUL}/LDAPHostname?raw=1)
    [ -z ${LDAP_HOSTNAME} ] && { echo "LDAP Hostname is not set"; exit 1; }

    LDAP_PORT=$(curl -s -fq ${CONSUL}/LDAPPort?raw=1)
    LDAP_PORT=${LDAP_PORT:-389}

    LDAP_BIND_USER=$(curl -s -fq ${CONSUL}/LDAPBindUser?raw=1)
    [ -z ${LDAP_BIND_USER} ] && { echo "LDAP Bind User is not set"; exit 1; }

    LDAP_BIND_PASSWORD=$(curl -s -fq ${CONSUL}/LDAPBindPassword?raw=1)
    [ -z ${LDAP_BIND_PASSWORD} ] && { echo "LDAP Bind Password is not set"; exit 1; }

    LDAP_BASE_DN=$(curl -s -fq ${CONSUL}/LDAPBaseDN?raw=1)
    [ -z ${LDAP_BASE_DN} ] && { echo "LDAP Base DN is not set"; exit 1; }

    LDAP_SSL=$(curl -s -fq ${CONSUL}/LDAPSSL?raw=1)
    LDAP_SSL=${LDAP_SSL:-"n"}
}

function validate_ldap() {
    # Some handy variables we can use
    . /opt/Okta/OktaLDAPAgent/scripts/defs.sh

    $JAVA -Dagent_home="$AgentInstallPrefix" -Dlog4j.configuration="$AgentInstallPrefix/conf/log4j.properties" -jar $AgentInstallPrefix/bin/OktaLDAPAgent.jar \
        -mode "validateLdap" \
        -orgUrl "$OKTA_URL" \
        -ldapHost "$LDAP_HOSTNAME" \
        -ldapPort "$LDAP_PORT" \
        -ldapAdminDN "$LDAP_BIND_USER" \
        -ldapAdminPassword "$LDAP_BIND_PASSWORD" \
        -baseDN "$LDAP_BASE_DN" \
        -configFilePath "$ConfigFile" \
        -noInstance "true" \
        -ldapUseSSL "$LDAP_SSL" 2>&1 > /dev/null
    RV=$?

    if [[ "$RV" == 0 ]]; then
        echo "LDAP settings verified"
        return 0
    else
        echo "LDAP settings failed"
        return ${RV}
    fi
}

function register_okta() {
    # Some handy variables we can use
    . /opt/Okta/OktaLDAPAgent/scripts/defs.sh

    echo -e "\nSaving install configuration file for future upgrades at:\n  $InstallConfigFile"
    echo """
    # Okta LDAP Agent Install configuration file.
    # This file is read during the post-installation or configuration time only.

    orgUrl=$OKTA_URL

    ldapHost=$LDAP_HOSTNAME
    ldapAdminDN=$LDAP_BIND_USER
    ldapPort=$LDAP_PORT
    baseDN=$LDAP_BASE_DN

    ldapUseSSL=$LDAP_SSL
    ldapSSLPort=$ldapSSLPort

    proxyEnabled=$proxyEnabled
    proxyHost=$proxyHost
    proxyPort=$proxyPort
    proxyUser=$proxyUser
    """ > $InstallConfigFile

    echo -e "\nConfiguring Okta LDAP agent...\n"
    $JAVA -Dagent_home="$AgentInstallPrefix" -Dlog4j.configuration="$AgentInstallPrefix/conf/log4j.properties" -jar $AgentInstallPrefix/bin/OktaLDAPAgent.jar \
        -mode "register" \
        -orgUrl "$OKTA_URL" \
        -ldapHost "$LDAP_HOSTNAME" \
        -ldapPort "$LDAP_PORT" \
        -ldapAdminDN "$LDAP_BIND_USER" \
        -ldapAdminPassword "$LDAP_BIND_PASSWORD" \
        -baseDN "$LDAP_BASE_DN" \
        -configFilePath "$ConfigFile" \
        -noInstance "true" \
        -ldapUseSSL "$LDAP_SSL"
}

read -p "You are are about to reconfigure Okta, and will overwrite the current configuration. Are you sure? [y/n]: " answer

# initialize all the things
_init

if [[ "$answer" == "y" ]]; then
    if validate_ldap; then
        echo "Validation sucess!"
    else
        echo "Failed
        exit 1
    fi
elif [[ "$answer" == "n" ]]; then
    echo "Aborting.."
    return 1
else
    echo "Invalid input"
    return 1
fi
